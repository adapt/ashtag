// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  module('ashtag.panes');

  ashtag.panes.SubmitSightingPane = (function(_super) {
    __extends(SubmitSightingPane, _super);

    function SubmitSightingPane() {
      this.handleSyncProgress = __bind(this.handleSyncProgress, this);
      this.handleSyncEnd = __bind(this.handleSyncEnd, this);
      this.handleSyncStart = __bind(this.handleSyncStart, this);
      this.sync = __bind(this.sync, this);
      this.updateSavedForLater = __bind(this.updateSavedForLater, this);
      this.hideOfflineStorageMessage = __bind(this.hideOfflineStorageMessage, this);
      this.showOfflineStorageMessage = __bind(this.showOfflineStorageMessage, this);
      this.handleSubmit = __bind(this.handleSubmit, this);
      _ref = SubmitSightingPane.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    SubmitSightingPane.prototype.initialise = function() {
      this.mapPane = new ashtag.panes.SubmitSightingMapPane(this.$el);
      this.$form = this.$('form');
      this.$imageField = this.$('form #id_image');
      this.$submitButton = this.$form.find('.submit-sighting');
      this.$offlineMessage = this.$form.find('.offline-msg');
      this.$savedForLater = this.$form.find('.saved-for-later');
      this.fileStore = new ashtag.FileStore();
      return this.updateSavedForLater();
    };

    SubmitSightingPane.prototype.setupEvents = function() {
      this.$form.on('submit', this.handleSubmit);
      return window.addEventListener('online', this.sync);
    };

    SubmitSightingPane.prototype.start = function() {
      return this.sync();
    };

    SubmitSightingPane.prototype.handleSubmit = function(e) {
      if (ashtag.extra.online()) {
        return this.submitOnline(e);
      } else {
        return this.submitOffline(e);
      }
    };

    SubmitSightingPane.prototype.submitOffline = function(e) {
      var file, hide, meta, storePromise;
      e.preventDefault();
      meta = this.$form.serialize();
      file = this.$imageField.get(0).files[0];
      storePromise = this.fileStore.storeFile(file, meta);
      this.showOfflineStorageMessage();
      hide = ashtag.extra.callAfter(2, this.hideOfflineStorageMessage);
      storePromise.then(hide);
      return setTimeout(hide, 4000);
    };

    SubmitSightingPane.prototype.showOfflineStorageMessage = function() {
      this.$submitButton.parent().hide();
      this.$offlineMessage.show();
      return this.$savedForLater.hide();
    };

    SubmitSightingPane.prototype.hideOfflineStorageMessage = function() {
      this.$offlineMessage.hide();
      this.$submitButton.parent().show();
      this.$savedForLater.show();
      return this.updateSavedForLater();
    };

    SubmitSightingPane.prototype.updateSavedForLater = function() {
      var _this = this;
      return this.fileStore.totalPendingFiles().then(function(total) {
        _this.$savedForLater.find('.total').text(total);
        return _this.$savedForLater.toggle(!!total);
      });
    };

    SubmitSightingPane.prototype.submitOnline = function(e) {};

    SubmitSightingPane.prototype.sync = function() {
      var _this = this;
      console.log('syncing');
      if (ashtag.extra.online()) {
        return this.fileStore.totalPendingFiles().then(function(total) {
          if (total) {
            _this.handleSyncStart();
            return _this.fileStore.allToServer().then(_this.handleSyncEnd, _this.handleSyncEnd, _this.handleSyncProgress);
          }
        });
      }
    };

    SubmitSightingPane.prototype.handleSyncStart = function() {
      if (this.syncing) {
        return;
      }
      this.syncing = true;
      $.mobile.loading('show', {
        text: '',
        textVisible: true
      });
      return this.handleSyncProgress();
    };

    SubmitSightingPane.prototype.handleSyncEnd = function() {
      this.syncing = false;
      $.mobile.loading('hide');
      return this.updateSavedForLater();
    };

    SubmitSightingPane.prototype.handleSyncProgress = function() {
      var _this = this;
      this.updateSavedForLater();
      return this.fileStore.totalPendingFiles().then(function(total) {
        return $('.ui-loader h1').text("Syncing sightings, " + total + " remaining");
      });
    };

    return SubmitSightingPane;

  })(ashtag.lib.panes.BasePane);

  $(window).on('pagechange', function(event, obj) {
    if (obj.toPage.attr('id') === 'submit-sighting-page') {
      return new ashtag.panes.SubmitSightingPane(obj.toPage);
    }
  });

}).call(this);
