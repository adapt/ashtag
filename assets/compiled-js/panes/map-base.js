// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module("ashtag.panes");

  ashtag.panes.MapBasePane = (function(_super) {
    __extends(MapBasePane, _super);

    function MapBasePane() {
      this.handleMapLoad = __bind(this.handleMapLoad, this);
      _ref = MapBasePane.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MapBasePane.prototype.initialise = function() {
      this.defaultLat = 54.03;
      this.defaultLng = -3.67;
      this.defaultZoom = 5;
      this.map = null;
      return this.$map = this.$('#map_canvas');
    };

    MapBasePane.prototype.setupEvents = function() {};

    MapBasePane.prototype.start = function() {
      if (window.google) {
        return this.setupMap();
      } else {
        return this.$map.addClass('unavailable-offline').html('<div class="msg">Map unavailable when offline</div>');
      }
    };

    MapBasePane.prototype.setupMap = function() {
      var mapOptions;
      mapOptions = {
        center: new google.maps.LatLng(this.defaultLat, this.defaultLng),
        zoom: this.defaultZoom,
        mapTypeId: google.maps.MapTypeId.HYBRID
      };
      this.map = new google.maps.Map(this.$map.get(0), mapOptions);
      return google.maps.event.addDomListener(window, 'load', this.handleMapLoad);
    };

    MapBasePane.prototype.centerOnUser = function() {
      var _this = this;
      if (!navigator.geolocation) {
        return;
      }
      return navigator.geolocation.getCurrentPosition(function(position) {
        return _this.setMapLocation(position.coords.latitude, position.coords.longitude);
      });
    };

    MapBasePane.prototype.handleMapLoad = function(e, map) {};

    MapBasePane.prototype.setMapLocation = function(lat, lng) {
      this.map.setCenter(new google.maps.LatLng(lat, lng));
      return this.map.setZoom(8);
    };

    return MapBasePane;

  })(ashtag.lib.panes.BasePane);

}).call(this);
