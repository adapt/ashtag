// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module("ashtag.panes");

  ashtag.panes.MapBasePane = (function(_super) {
    __extends(MapBasePane, _super);

    function MapBasePane() {
      this.handleMapLoad = __bind(this.handleMapLoad, this);
      return MapBasePane.__super__.constructor.apply(this, arguments);
    }

    MapBasePane.prototype.initialise = function() {
      this.defaultLat = 54.03;
      this.defaultLng = -3.67;
      this.defaultZoom = 5;
      this.zoomedInZoomLevel = 8;
      this.map = null;
      return this.$map = this.$('#map_canvas');
    };

    MapBasePane.prototype.setupEvents = function() {};

    MapBasePane.prototype.start = function() {
      return ashtag.extra.whenOnline().then((function(_this) {
        return function() {
          return _this.setupMap();
        };
      })(this));
    };

    MapBasePane.prototype.setupMap = function() {
      var mapOptions;
      mapOptions = {
        center: new google.maps.LatLng(this.defaultLat, this.defaultLng),
        zoom: this.defaultZoom,
        mapTypeId: google.maps.MapTypeId.HYBRID
      };
      this.map = new google.maps.Map(this.$map.get(0), mapOptions);
      return google.maps.event.addListenerOnce(this.map, 'idle', this.handleMapLoad);
    };

    MapBasePane.prototype.centerOnUser = function() {
      var deferred;
      deferred = $.Deferred();
      ashtag.extra.geoLocate().then((function(_this) {
        return function(lat, lng) {
          if (ashtag.extra.isLatLngSane(lat, lng)) {
            _this.setMapLocation(lat, lng, _this.zoomedInZoomLevel);
          }
          return deferred.resolve(lat, lng);
        };
      })(this), (function(_this) {
        return function() {
          _this.setMapLocation(_this.defaultLat, _this.defaultLng, _this.defaultZoom);
          return deferred.reject();
        };
      })(this));
      return deferred.promise();
    };

    MapBasePane.prototype.handleMapLoad = function(e, map) {};

    MapBasePane.prototype.setMapLocation = function(lat, lng, zoom) {
      this.map.setCenter(new google.maps.LatLng(lat, lng));
      return this.map.setZoom(zoom);
    };

    return MapBasePane;

  })(ashtag.lib.panes.BasePane);

}).call(this);
