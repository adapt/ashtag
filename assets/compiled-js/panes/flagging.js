// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module("ashtag.panes");

  ashtag.panes.FlaggingPane = (function(_super) {
    __extends(FlaggingPane, _super);

    function FlaggingPane() {
      this.handleResponse = __bind(this.handleResponse, this);
      this.handleReportClick = __bind(this.handleReportClick, this);
      this.handleFlagClick = __bind(this.handleFlagClick, this);
      return FlaggingPane.__super__.constructor.apply(this, arguments);
    }

    FlaggingPane.prototype.initialise = function() {
      this.$flagButtons = this.$('.report-button');
      this.$sendReportButton = this.$('#send-report');
      return this.$dialogFlagType = this.$('.dialog-flag-type');
    };

    FlaggingPane.prototype.setupEvents = function() {
      this.$flagButtons.unbind().bind('click', this.handleFlagClick);
      return this.$sendReportButton.unbind().bind('click', this.handleReportClick);
    };

    FlaggingPane.prototype.start = function() {};

    FlaggingPane.prototype.handleFlagClick = function(event) {
      var $el;
      $el = $(event.currentTarget);
      this.flag_type = $el.attr('data-flag-type');
      this.flag_id = $el.attr('data-flag-id');
      this.handled_button = $el;
      return this.$dialogFlagType.html(" " + this.flag_type);
    };

    FlaggingPane.prototype.handleReportClick = function(event) {
      var args, url;
      args = {};
      args[this.flag_type] = this.flag_id;
      switch (this.flag_type) {
        case 'tree':
          url = "/sightings/tree/" + this.flag_id + "/flag/";
          break;
        case 'sighting':
          url = "" + location.pathname + "flag/";
      }
      return $.post(url, args, this.handleResponse);
    };

    FlaggingPane.prototype.handleResponse = function(data, textStatus, jqXHR) {
      switch (this.flag_type) {
        case 'sighting':
          if ('remove' in data.sighting) {
            return $("#sighting-" + data.sighting.remove).fadeOut();
          } else {
            this.handled_button.hide();
            return this.handled_button.hide().after('<div class="reported">Reported.</div>');
          }
          break;
        case 'tree':
          return this.handled_button.hide().after('<div class="reported">Reported.</div>');
      }
    };

    return FlaggingPane;

  })(ashtag.lib.panes.BasePane);

  $(window).on('pagechange', (function(_this) {
    return function(event, obj) {
      return new ashtag.panes.FlaggingPane(obj.toPage);
    };
  })(this));

}).call(this);
