// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module("ashtag.panes");

  ashtag.panes.BasketPane = (function(_super) {
    __extends(BasketPane, _super);

    function BasketPane() {
      this.reload = __bind(this.reload, this);
      return BasketPane.__super__.constructor.apply(this, arguments);
    }

    BasketPane.prototype.initialise = function() {
      this.$form = this.$('form');
      return this.$removes = this.$('.remove');
    };

    BasketPane.prototype.setupEvents = function() {
      return this.$removes.on('click', (function(_this) {
        return function(e) {
          e.preventDefault();
          return _this.remove($(e.target).closest('a').data('id'));
        };
      })(this));
    };

    BasketPane.prototype.start = function() {};

    BasketPane.prototype.remove = function(id) {
      $("#id_form-" + id + "-DELETE").attr('checked', 'checked');
      $.mobile.hidePageLoadingMsg();
      return this.submit().then(this.reload);
    };

    BasketPane.prototype.submit = function() {
      return $.post(this.$form.attr('action'), this.$form.serialize());
    };

    BasketPane.prototype.reload = function() {
      return $.mobile.changePage(window.location.href, {
        allowSamePageTransition: true,
        transition: 'none',
        reloadPage: true
      });
    };

    return BasketPane;

  })(ashtag.lib.panes.BasePane);

  $(window).on('pagechange', (function(_this) {
    return function(event, obj) {
      if (obj.toPage.attr('id') === 'basket-page') {
        return new ashtag.panes.BasketPane(obj.toPage);
      }
    };
  })(this));

}).call(this);
