// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  module("ashtag");

  ashtag.FileStore = (function() {
    function FileStore() {
      this._handleStoreFailure = __bind(this._handleStoreFailure, this);
      this._handleStoreSuccess = __bind(this._handleStoreSuccess, this);
      this._storeFile = __bind(this._storeFile, this);
      this.imageFieldName = "image";
      this.imageFieldName = "meta";
      this.enabled = this._supported();
      ashtag.lib.mixins.Observable.prototype.augment(this);
      if (!this._supported) {
        return;
      }
      this.db = this.getDb();
      this.initialiseDb();
      this.allToServer();
    }

    FileStore.prototype._supported = function() {
      return !!window.openDatabase;
    };

    FileStore.prototype.disable = function() {
      this.enabled = false;
      return this.fire('disable');
    };

    FileStore.prototype.enable = function() {
      this.enabled = true;
      return this.fire('enable');
    };

    FileStore.prototype.getDb = function() {
      return window.openDatabase('uploader', '', 'Pending uploads', 10 * 1024 * 1024);
    };

    FileStore.prototype.initialiseDb = function() {
      var _this = this;
      return this.db.transaction(function(tx) {
        return tx.executeSql("CREATE TABLE IF NOT EXISTS [files] (                               [id] INTEGER PRIMARY KEY AUTOINCREMENT,                              [name], [meta], [file]                          )", [], function() {
          return _this.enable();
        }, function() {
          return _this.disable();
        });
      });
    };

    FileStore.prototype.storeFile = function(file, meta) {
      if (meta == null) {
        meta = '';
      }
      if (!this.enabled) {
        throw 'Offline uploading disabled';
      }
      return this._readFile(file, meta).then(this._storeFile).then(this._handleStoreSuccess, this._handleStoreFailure);
    };

    FileStore.prototype._readFile = function(file, meta) {
      var deferred, reader,
        _this = this;
      console.log('read');
      deferred = $.Deferred();
      reader = new FileReader();
      reader.onloadend = function(e) {
        var fileData;
        fileData = e.target.result;
        return deferred.resolve(file.name, fileData, meta);
      };
      reader.readAsDataURL(file);
      return deferred;
    };

    FileStore.prototype._storeFile = function(fileName, fileData, meta) {
      var deferred,
        _this = this;
      console.log('store');
      deferred = $.Deferred();
      this.db.transaction(function(tx) {
        return tx.executeSql("INSERT INTO [files] ([name], [meta], [file]) VALUES (?, ?, ?)", [fileName, meta, fileData], function() {
          return deferred.resolve();
        }, function() {
          return deferred.reject();
        });
      });
      return deferred;
    };

    FileStore.prototype._handleStoreSuccess = function() {
      return console.log('success');
    };

    FileStore.prototype._handleStoreFailure = function() {
      return console.log('failure');
    };

    FileStore.prototype.allToServer = function() {
      var deferred, send,
        _this = this;
      deferred = $.Deferred();
      send = function() {
        return _this.popToServer().then(function() {
          return deferred.notify();
        }, function() {
          return deferred.resolve();
        });
      };
      deferred.then(null, null, send);
      send();
      return deferred;
    };

    FileStore.prototype.popToServer = function() {
      var deferred;
      deferred = $.Deferred();
      this.db.transaction(function(tx) {
        return tx.executeSql("SELECT * FROM [files] LIMIT 1", [], function(tx, res) {
          var item;
          if (!res.rows.length) {
            return deferred.reject();
          } else {
            item = res.rows[0];
            console.log(res.rows);
            console.log(item);
            return this.sendToServer(item.name, item.file, item.meta).then(function() {
              return tx.executeSql("DELETE FROM [files] WHERE [id] = ?", [item.id], function() {
                return deferred.resolve();
              }, function() {
                return deferred.resolve();
              });
            }, function() {
              return deferred.resolve();
            });
          }
        });
      });
      return deferred;
    };

    FileStore.prototype.sendToServer = function(name, file, meta) {
      var data;
      data = ["" + this.imageFieldName + "_name=" + name, "" + this.imageFieldName + "=" + file];
      if (meta) {
        data.push(meta);
      }
      return $.ajax({
        data: data.join('&'),
        type: 'POST'
      });
    };

    return FileStore;

  })();

}).call(this);
